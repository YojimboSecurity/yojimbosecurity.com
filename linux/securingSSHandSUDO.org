#+TITLE: Securing SSH and SUDO Logging
#+INCLUDE: "../header.org"
#+AUTHOR: David Johnson
#+SETUPFILE: "../org-html-themes/org/theme-readtheorg-local-1.setup"
#+INDEX: SSH
#+INDEX: Linux!Logging!SSH
#+TAG: Linux
#+TAG: SSH
#+TAG: SUDO
#+TAG: Logging

In this tutorial we will secure SSH by disabling root logon and logon with a password. We will then enable sudo logging giving us the ability to replay a users session.

* Prerequisites
I will be using two Ubuntu vagrant machines however this should work on must systems with ssh and sudo. Keep in mind the paths and files may differ across different systems.

* Step 1: Create RSA Keys
The first step is to generate the RSA key pair.

#+BEGIN_EXAMPLE
ssh-keygen -t rsa
#+END_EXAMPLE

You will be asked where to keep the keys and for a passphrase. I recommend leaving the path to the files the default path. As for the passphrase it does add extra security as well as an extra step.

* Step 2: Give Remote Host Public RSA Key
We want the remote host to be able to use our key so we need to give it the public RSA key we just created. If you changed the file path go there for your keys other wise they are located at *~/.ssh/id_rsa.pub*.

Copy the contents of this file and add it to the remote hosts authorized_keys.

Example

#+BEGIN_EXAMPLE
cat ~/.ssh/id_rsa.pub | ssh user@192.168.0.1 "mkdir -p ~/.ssh && cat >>  ~/.ssh/authorized_keys"
#+END_EXAMPLE  

* Step 3: Verify
Make sure everything is working. Try to log on. It should connect with out asking for a password.

* Step 4: Disable Password logon
With SSH RSA keys working the next step is to disable password logon. To do that we will edit /etc/ssh/sshd_config. Locate and change PasswordAuthentication to no

Example

#+BEGIN_EXAMPLE
# Change to no to disable tunnelled clear text passwords
PasswordAuthentication no  
I recommend disabling root logon as well. To do that locate and change PermitRootLogin to no
#+END_EXAMPLE

Example

#+BEGIN_EXAMPLE
# Authentication:
LoginGraceTime 120  
PermitRootLogin no  
StrictModes yes  
Save the changes and restart the sshd daemon. 
sudo service ssh restart
#+END_EXAMPLE

* Step 5: Enable SUDO Logging
The next step in securing the system is to enable sudo logging. There are several ways to log sudo activity but the coolest way is with sudoreplay.

To enable sudo logging we will be editing the sudoers file. Before that I highly recommend using visudo to do so. For one thing you don't have to remember the fie path just type visudo. Also if there are errors in you configuration it will notify you. Visudo will be what I using in the examples.

Add the following to your sudoers file.

#+BEGIN_EXAMPLE
Defaults    log_output  
Defaults!   /sbin/reboot !log_output  
Defaults!   /usr/bin/sudoreplay !log_output
#+END_EXAMPLE  

The above enables output logging except for sudoreplay and reboot.

* Step 6: Verify

Run 
#+BEGIN_EXAMPLE
sudo ls 
#+END_EXAMPLE

Then 
#+BEGIN_EXAMPLE
sudoreplay -l
#+END_EXAMPLE

You should see something like the following.

#+BEGIN_EXAMPLE
Oct 26 15:56:57 2017 : vagrant : TTY=/dev/pts/0 ; CWD=/var/log ; USER=root ; TSID=000001 ; COMMAND=/bin/ls  
To replay sudoreplay 000001.
#+END_EXAMPLE

If a user were to sudo su the whole session could be replayed in real time, speed up, or slowed down.

* Summary
The purpose of this was to secure a system by enabling SSH RSA Keys and disable root login as well as password logon. Once that was complete sudo logging was enabled and with that accountability for privileged commands has been established.

This is just one step in securing a system. However a bunch of little steps add up and makes a big difference.
